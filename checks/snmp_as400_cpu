def inventory_as400_cpu(info):
  return [('', None)]

def check_as400_cpu(item, params, info):

  warn,crit = params["cpu_levels"]
  pct_usage = savefloat(info[0][0]) / 100.00

  perfdata  = [ ( "usage", pct_usage, warn, crit, 0, 100 ) ]
  output    = "AS/400 CPU at %.2f%%" % pct_usage

  rc = 0
  if pct_usage >= crit:
    rc = 2
  elif pct_usage >= warn:
    rc = 1

  return (rc, output, perfdata)

check_info["snmp_as400_cpu"] = {
    "check_function"          : check_as400_cpu,
    "inventory_function"      : inventory_as400_cpu,
    "service_description"     : "AS/400 CPU",
    "has_perfdata"            : True,
    "group"                   : "as400",
    "default_levels_variable" : "as400_defaults",
    "includes"                : ["snmp_as400.include"]
}

# OID is SNMPv2-SMI::enterprises.2.6.4.5.1.0
snmp_info["snmp_as400_cpu"] = ( ".1.3.6.1.4.1.2.6.4.5.1" ,["0"])

snmp_scan_functions['snmp_as400_cpu'] = \
    lambda oid: oid(".1.3.6.1.2.1.1.1.0").startswith("IBM OS/400")