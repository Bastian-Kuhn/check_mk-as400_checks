def inventory_as400_tcp_connections(info):
  return [('', None)]

def check_as400_tcp_connections(item, params, info):

  warn,crit = params["tcp_connections_levels"]
  tcp_connections_num  = saveint(info[0][0])

  perfdata  = [ ( "tcp_connections", tcp_connections_num, warn, crit, None, None ) ]

  if (tcp_connections_num == 1):
    output = "%d established connection" % tcp_connections_num
  else:
    output = "%d established connections" % tcp_connections_num

  rc = 0
  if tcp_connections_num >= crit:
    rc = 2
  elif tcp_connections_num >= warn:
    rc = 1

  return (rc, output, perfdata)

check_info["snmp_as400_tcp_connections"] = {
    "check_function"          : check_as400_tcp_connections,
    "inventory_function"      : inventory_as400_tcp_connections,
    "service_description"     : "AS/400 connections",
    "has_perfdata"            : True,
    "group"                   : "as400_tcp_connections",
    "default_levels_variable" : "as400_tcp_connections_defaults",
    "includes"                : ["snmp_as400.include"]
}

# OID is HOST-RESOURCES-MIB::hrSystemNumtcp_connections.0
snmp_info["snmp_as400_tcp_connections"] = ( ".1.3.6.1.2.1.6", ["9"])

# Apply the check only if SNMP sysDescr starts with "IBM OS/400"
snmp_scan_functions['snmp_as400_tcp_connections'] = \
    lambda oid: oid(".1.3.6.1.2.1.1.1.0").startswith("IBM OS/400")